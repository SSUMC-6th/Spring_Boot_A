Keyword: accpet() 시스템 콜
### **accpet(sockfd, sockaddr , socklen_t**);

> **backlog queue에서 *syn(연결 요청)*을 보내와 대기 중인 요청을 
선입선출(자료구조 큐)로 하나씩 연결에 대한 수립(Established)을 해주는 콜**

****리턴 값: 새로운 파일 디스크립터(소켓)
> 

<aside>
💡 서버에서만 호출

</aside>

### socket() 파라미터 → sockfd

- listen()에서 클라이언트 소켓의 연결을 받는 **서버 소켓**

### socket() 파라미터 → sockaddr

- 클라이언트의 아이피 주소, 포트번호를 받는 구조체
- 백로그 큐에서 가장 앞에 있는 연결요청 구조체에서 알아내서 가져온다

### socket() 파라미터 → socklen_t

- `sockaddr` 구조체의 메모리 크기

### 이 과정에서, `TCP 3-way handshake` 진행

이때 클라이언트와 서버간에 서로 신뢰성있는 통신을 하기 위해 서버 프로세스와 클라이언트 프로세스 간의 연결 확인이 이루어진다 → `TCP 3-way handshake`

<aside>
💡 1. listen() 시스템 콜 이후 대기 상태인 서버의 소켓에 클라이언트가 연결 요청 “**SYN**”을 보내 두었었음

( SYN: 첫 번째 handshake 과정 )

1. 이후 나머지 두 과정은 accept() 시스템 콜 이후 진행

최종적으로 **Established 상태**를 수립 하고 본격적인 데이터의 송/수신이 이루어진다.

</aside>

### accept() 이후 과정

- 당연하게도, accept 시스템 콜 이후 이후 나머지 두 개의 3-handshake 과정도 운영체제가 제공하는 system call을 통해 이루어진다!
- 최종적으로,
**SYN(클라이언트) → accept()(서버) → 멀티 프로세스/멀티 쓰레드 → SYN, ACK(서버) → ACK(클라이언트) (잔여 handshake)** 의 과정을 거치게 됨

여기서 멀티 프로세스 과정은 무엇인가?